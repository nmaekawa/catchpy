{
    "swagger": "2.0",
    "info": {
        "version": "1.2.0",
        "title": "CATCHPY Annotation API"
    },
    "tags": [
        {
            "name": "catchpy",
            "description": "catchpy annotation API."
        },
        {
            "name": "not yet available",
            "description": "to be implemented."
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/annos/{id}": {
            "get": {
                "tags": ["catchpy"],
                "summary": "Gets the `Annotation` object for the given id",
                "description": "The requesting user must have permission to read the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "post": {
                "tags": ["catchpy"],
                "summary": "Creates an `Annotation` object",
                "description": "`id` values in the input annotation json will be ignored; the `id` specified at the path is always used.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "anno",
                        "in": "body",
                        "description": "annotation object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "put": {
                "tags": ["catchpy"],
                "summary": "Updates an `Annotation` object",
                "description": "This operation will replace the list of tags and targets with the ones sent as input",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "anno",
                        "in": "body",
                        "description": "annotation object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "headers": {
                            "Location": {
                                "description": "url for the updated annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "delete": {
                "tags": ["catchpy"],
                "summary": "Deletes an `Annotation` object",
                "description": "The requesting user must have permission to delete the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/": {
            "get": {
                "tags": ["catchpy"],
                "summary": "Returns list of `Annotation` objects resulting from the given search",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "max number of annotations in response; `-1` means all results, default is `10`, max is `200` (but configurable)",
                        "type": "integer",
                        "default": "10"
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "where the slice of returned `Annotation` objects should start; default is `0`",
                        "type": "integer",
                        "default": "0"
                    },
                    {
                        "name": "userid",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?userid=jsnow&userid=rstark&userid=tgreyjoy",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "exclude_userid",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _AND_ list; ex: ?exclude_userid=jsnow&exclude_userid=rstark&userid=tgreyjoy",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "username",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?username=firstofhername&userid=theunburnt&exclude_username=motherofdragons",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "exclude_username",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _AND_ list; ex: ?exclude_username=firstofhername&exclude_username=theunburnt&userid=motherofdragons",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "target_source",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?source=http//winterfell.no&source=http//dorn.so&source=http//essos.we",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "text",
                        "required": false,
                        "in": "query",
                        "description": "fulltext search in body of annotation; note that this is _NOT_ an exact search",
                        "type": "string"
                    },
                    {
                        "name": "media",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?media=Video&media=Annotation. Note that media type changed for replies: for catchpy use `Annotation` instead of `comment`",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "tag",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?tag=firstofhisname&tag=protectoroftherealm&tag=lannister",
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {"type": "string"}
                    },
                    {
                        "name": "platform",
                        "required": false,
                        "in": "query",
                        "description": "lti platform name",
                        "type": "string"
                    },
                    {
                        "name": "source_id",
                        "required": false,
                        "in": "query",
                        "description": "source_id is the target_source internal `id` property of annotation `platform`",
                        "type": "string"
                    },
                    {
                        "name": "context_id",
                        "required": false,
                        "in": "query",
                        "description": "context_id with the given platform",
                        "type": "string"
                    },
                    {
                        "name": "collection_id",
                        "required": false,
                        "in": "query",
                        "description": "collection_id within the given context_id; ignored if context_id not present",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/SearchResult"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "post": {
                "tags": ["catchpy"],
                "summary": "Creates an `Annotation` object",
                "description": "If an `id` is included in the annotation input parameter, it will try to be honored but the create action will fail if already present in storage.",
                "parameters": [
                    {
                        "name": "anno",
                        "in": "body",
                        "description": "annotation object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/update_tags": {
            "put": {
                "tags": ["not yet available"],
                "summary": "TO BE IMPLEMENTED",
                "description": "TO BE IMPLEMENTED! Replaces the list of tags in the given `Annotation` object; the requesting user must permission to update the Annnotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "body",
                        "description": "list of tags",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Tags"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/update_text": {
            "put": {
                "tags": ["not yet available"],
                "summary": "TO BE IMPLEMENTED",
                "description": "TO BE IMPLEMENTED! Replaces the textual body of given `Annotation` object; the requesting user must have permission to update the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "in": "body",
                        "description": "annotation text",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BodyItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/update_target": {
            "put": {
                "tags": ["not yet available"],
                "summary": "TO BE IMPLEMENTED",
                "description": "TO BE IMPLEMENTED! Replaces the list of targets of given `Annotation` object; the requesting user must have permission to update the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "target",
                        "in": "body",
                        "description": "annotation target object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Target"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/copy": {
            "post": {
                "tags": ["catchpy"],
                "summary": "Copies instructor annotations to different context_id",
                "description": "Copies annotations given a map of instructor userids; the requesting user must have permission to perform 'copy' operation; replies to annotations are ignored",
                "parameters": [
                    {
                        "name": "copy_params",
                        "in": "body",
                        "description": "parameters for copy",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CopyParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Results from copy operation",
                        "schema": {
                            "$ref": "#/definitions/CopyResult"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        }
    },
    "securityDefinitions": {
        "jwt_catchpy2": {
            "description": "jwt token; the jwt token must be prefixed with a 'token ' string; ex: Authorization: 'token <encoded_jwt_token>'",
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        },
        "jwt_annotator": {
            "description": "jwt token for backward-compatibility",
            "type": "apiKey",
            "name": "x-annotator-auth-token",
            "in": "header"
        }
    },
    "definitions": {
        "Annotation": {
            "type": "object",
            "required": ["id", "body", "target",
        "platform", "permissions", "creator", "schema_version"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "schema_version": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "dateTime"
                },
                "modified": {
                    "type": "string",
                    "format": "dateTime"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "permissions": {
                    "$ref": "#/definitions/Permissions"
                },
                "platform": {
                    "$ref": "#/definitions/Platform"
                },
                "body": {
                    "$ref": "#/definitions/Body"
                },
                "target": {
                    "$ref": "#/definitions/Target"
                }
            }
        },
        "Body": {
            "type": "object",
            "required": ["type", "items"],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Choice",
                        "List"
                    ]
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/BodyItem"
                    }
                }
            }
        },
        "BodyItem": {
            "type": "object",
            "required": ["type", "purpose", "value"],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "TextualBody"
                    ]
                },
                "format": {
                    "type": "string",
                    "enum": [
                        "text/html",
                        "text/plain",
                        "text/richtext",
                        "application/rtf",
                        "application/x-rtf"
                    ]
                },
                "purpose": {
                    "type": "string",
                    "enum": [
                        "commenting",
                        "tagging",
                        "replying"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Target": {
            "type": "object",
            "required": ["type", "items"],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Choice",
                        "List"
                    ]
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/TargetItem"
                    }
                }
            }
        },
        "TargetItem": {
            "type": "object",
            "required": ["source", "type"],
            "properties": {
                "source": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Image",
                        "Video",
                        "Audio",
                        "Thumbnail",
                        "Annotation",
                        "Choice"
                    ]
                },
                "format": {
                    "type": "string"
                },
                "selector": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "Choice",
                                "List"
                            ]
                        },
                        "items": {
                            "type": "array",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/SelectorItem"
                            }
                        }
                    }
                },
                "scope": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "enum": [
                                "Viewport"
                            ]
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "SelectorItem": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "RangeSelector",
                        "XPathSelector",
                        "TextPositionSelector",
                        "TextQuoteSelector",
                        "CssSelector",
                        "FragmentSelector",
                        "SvgSelector"
                    ]
                },
                "conformsTo": {
                    "type": "string"
                },
                "refinedBy": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/SelectorItem"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Creator": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Permissions": {
            "type": "object",
            "required": ["can_read", "can_update", "can_delete", "can_admin"],
            "properties": {
                "can_read": {
                    "$ref": "#/definitions/Permission"
                },
                "can_update": {
                    "$ref": "#/definitions/Permission"
                },
                "can_delete": {
                    "$ref": "#/definitions/Permission"
                },
                "can_admin": {
                    "$ref": "#/definitions/Permission"
                }
            }
        },
        "Permission": {
            "type": "array",
            "minItems": 0,
            "items": {
                "type": "string"
            },
            "uniqueItems": true
        },
        "Platform": {
            "type": "object",
            "required": ["platform_name", "context_id"],
            "properties": {
                "platform_name": {
                    "type": "string"
                },
                "context_id": {
                    "type": "string"
                },
                "collection_id": {
                    "type": "string"
                },
                "target_source_id": {
                    "type": "string"
                }
            }
        },
        "Tags": {
            "type": "array",
            "minItems": 0,
            "items": {
                "type": "string"
            }
        },
        "SearchResult": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "total of objects found for search"
                },
                "size": {
                    "type": "integer",
                    "description": "number of objects returned in this list"
                },
                "limit": {
                    "type": "integer",
                    "description": "max number of objects requested"
                },
                "offset": {
                    "type": "integer",
                    "description": "requested offset"
                },
                "size_failed": {
                    "type": "integer",
                    "description": "number of objects that failed to be formatted"
                },
                "failed": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/FailedItem"
                    }
                },
                "rows": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Annotation"
                    }
                }
            }
        },
        "FailedItem": {
            "type": "object",
            "required": ["id", "msg"],
            "properties": {
                "id": {"type": "string"},
                "msg": {"type": "string", "description": "error message"}
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "description": "http status code"

                },
                "payload": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "type": "string",
                        "description": "list of error messages to be displayed"
                    }
                }
            }
        },
        "CopyParams": {
            "type": "object",
            "required": ["source_context_id", "source_collection_id",
                "target_context_id", "target_collection_id", "userid_map"],
            "properties": {
                "source_context_id": {"type": "string"},
                "source_collection_id": {"type": "string"},
                "target_context_id": {"type": "string"},
                "target_collection_id": {"type": "string"},
                "platform_name": {"type": "string"},
                "userid_map": {
                    "type": "object",
                    "description": "maps source instructor userid to target instructor userid, e.g. {\"smith\": \"johnson\"}"
                }
            }
        },
        "CopyResult": {
            "type": "object",
            "properties": {
                "original_total": {
                    "type": "integer",
                    "description": "number of total Annotation objects selected to be copied"
                },
                "total_success": {
                    "type": "integer"
                },
                "total_failure": {
                    "type": "integer"
                },
                "success": {
                    "type": "array",
                    "minItems": 0,
                    "description": "list of Annotation objects successfully created in copy operation",
                    "items": {
                        "$ref": "#/definitions/Annotation"
                    }
                },
                "failure": {
                    "type": "array",
                    "minItems": 0,
                    "description": "items that failed to be copied; each Annotation object in this array includes a string property `error` with error message",
                    "items": {
                        "$ref": "#/definitions/Annotation"
                    }
                }
            }
        }
    }
}
